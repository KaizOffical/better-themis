<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Better Themis - Local Judge for C++</title>
  <link rel="stylesheet" href="./styles.css">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
  <style>
    @keyframes spin {
      0% {
        transform: rotate(0deg);
      }

      100% {
        transform: rotate(360deg);
      }
    }
  </style>
  <link rel="icon" type="image/x-icon" href="/imgs/logo.png">
</head>

<body>
  <div class="container">
    <div class="toolbar">
      <button data-bs-toggle="modal" data-bs-target="#exampleModal"><img src="imgs/about.png" alt="V·ªÅ Better Themis"></button>
      <button onclick="window.location.href = '/change-password'" style="width: 25rem; text-align: left; padding: 10px;">Th√≠ sinh: <%= username %></button>
      <button style="width: 30rem; padding: 10px;"><input style="width: 100%;" id="file" type="file" accept=".cpp"></button>
      <button onclick="submit()"><img src="imgs/submit.png" alt="N·ªôp b√†i"></button>
      <button onclick="window.location.href = '/logout'"><img src="imgs/logout.png" alt="ƒêƒÉng xu·∫•t"></button>
    </div>
    <div id="loading" style="display: flex; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(255, 255, 255, 1); z-index: 1000; text-align: center; justify-content: center; align-items: center;">
      <div style="display: inline-block; border: 4px solid #f3f3f3; border-top: 4px solid #3498db; border-radius: 50%; width: 50px; height: 50px; animation: spin 1s linear infinite;"></div>
    </div>
    <div class="table-container">
      <table>
        <thead>
          <tr id="probs" class="probs">
            <th class="config-element">Th√≠ sinh</th>
            <th class="config-element">T·ªïng ƒëi·ªÉm</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td class="target-element" data-id="1"></td>
            <td class="target-element" data-id="2"></td>
          </tr>
        </tbody>
      </table>
    </div>
    <div class="status-bar">
      Better Themis: ‚àö: ƒê√£ ch·∫•m; êÑÇ: Kh√¥ng n·ªôp b√†i; ‚Ñ±: D·ªãch b·ªã l·ªói; ‚ö†: L·ªói nghi√™m tr·ªçng.
    </div>
    <div id="custom-menu" class="menu">
      <p id="detail" data-action="detail">Chi ti·∫øt</p>
    </div>
  </div>

  <div class="modal modal-xl fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div style="width: 1000px !important" class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h1 class="modal-title fs-5" id="exampleModalLabel">V·ªÅ Better Themis</h1>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <p>Better Themis l√† m·ªôt tr√¨nh ch·∫•m ƒëi·∫ªm t·ª± ƒë·ªông cho c√°c b√†i thi l·∫≠p tr√¨nh thi ƒë·∫•u b·∫±ng C++. Ph·∫ßn m·ªÅm ƒë∆∞·ª£c ph√°t tri·ªÉn d·ª±a tr√™n √Ω t∆∞·ªüng c·ªßa ph·∫ßn m·ªÅm Themis s·∫µn c√≥, tuy nhi√™n ƒë∆∞·ª£c kh·∫Øc ph·ª•c m·ªôt s·ªë h·∫°n ch·∫ø v√† c·∫≠p nh·∫≠t hi·ªán ƒë·∫°i h∆°n. D∆∞·ªõi ƒë√¢y l√† m·ªôt s·ªë ƒëi·ªÉm m√† Better Themis ƒë√£ kh·∫Øc ph·ª•c</p>
          <ul>
            <li>Ch·∫•m ƒë·ªìng th·ªùi nhi·ªÅu b√†i l√†m - Gi√∫p gi·∫£m th·ªùi gian ch·∫•m, tuy nhi√™n c√≥ th·ªÉ l√†m ch·∫≠m th·ªùi gian n√™n ng∆∞·ªùi ch·∫•m c√≥ th·ªÉ t·∫Øt trong ph·∫ßn "C√†i ƒë·∫∑t"</li>
            <li>Tr√¨nh ki·ªÉm tra k·∫øt qu·∫£ ti√™n ti·∫øn h∆°n - Better Themis s·ª≠ d·ª•ng tr√¨nh ki·ªÉm tra ƒë∆∞·ª£c ph√°t tri·ªÉn v√† s·ª≠ d·ª•ng tr√™n n·ªÅn t·∫£ng Codeforces n√™n r·∫•t uy t√≠n v√† hi·ªáu qu·∫£, ng∆∞·ªùi ch·∫•m c√≥ th·ªÉ d·ªÖ d√†ng t·∫°o tr√¨nh ki·ªÉm tra ngo√†i ƒë√¥i v·ªõi c√°c b√†i y√™u c·∫ßu ƒë·∫∑c bi·ªát d·ªÖ d√†ng, nhanh ch√≥ng v√† hi·ªáu qu·∫£</li>
            <li>H·ªá th·ªëng ho·∫°t ƒë·ªông ƒë∆°n gi·∫£n, t·ªëi ∆∞u, gi·∫£m dung l∆∞·ª£ng b·ªô nh·ªõ. T√≠ch h·ª£p nhi·ªÅu d·ªãch v·ª• c·∫ßn thi·∫øt ƒë∆°n gi·∫£n nh∆∞: tr√¨nh ch·∫•m b·∫±ng Terminal (ch·∫°y v√† l∆∞u k·∫øt qu·∫£, kh√¥ng c√≥ giao di·ªán), tr√¨nh ch·∫•m c√≥ h·ªó tr·ª£ giao di·ªán, tr√¨nh ch·∫•m online</li>
          </ul>
          Tuy nhi√™n, Better Themis v·∫´n c√≤n m·ªôt s·ªë nh∆∞·ª£c ƒëi·ªÉm, h√£y c√¢n nh·∫Øc khi s·ª≠ d·ª•ng
          <ul>
            <li>Tr√¨nh ch·∫•m ƒë∆∞·ª£c vi·∫øt ƒë∆°n gi·∫£n, ƒë∆∞·ª£c t·∫°o ra tr√™n m·ª•c ƒë√≠ch gi√°o d·ª•c (luy·ªán code) c·ªßa t√°c gi·∫£. V√¨ th·∫ø, tr√¨nh ch·∫•m s·∫Ω kh√¥ng ƒë∆∞·ª£c c·∫≠p nh·∫≠t th∆∞·ªùng xuy√™n.</li>
            <li>V√¨ kƒ© nƒÉng v√† ki·∫øn th·ª©c c·ªßa t√°c gi·∫£ c√≤n gi·ªõi h·∫°n n√™n c√≥ th·ªÉ v·∫´n t·ªìn t·∫°i m·ªôt s·ªë v·∫•n ƒë·ªÅ, l·ªói trong qu√° tr√¨nh s·ª≠ d·ª•ng. V√¨ th·∫ø, n·∫øu g·∫∑p b·∫•t c·ª© v·∫•n ƒë·ªÅ g√¨, xin h√£y b√°o c√°o ƒë·ªÉ t√°c gi·∫£ c√≥ th·ªÉ s·ª≠a v√† cho ra b·∫£n m·ªõi h∆°n!</li>
          </ul>
          <hr>
          <h3>T√°c gi·∫£</h3>
          <ul>
            <li>Giao di·ªán: Chat GPT</li>
            <li>H·ªá th·ªëng: Kaiz</li>
            <li>M√°y ch·∫•m: Kaiz</li>
            <li>C√¥ng ngh·ªá</li>
            <ul>
              <li>Giao di·ªán: Bootstrap v5.3</li>
              <li>Ph√°t tri·ªÉn ·ª©ng d·ª•ng: Electron JS <span id="elejsv"></span></li>
              <li>Th∆∞ vi·ªán h·ªó tr·ª£ m√°y ch·∫•m: Codeforces Testlib</li>
              <li>N·ªÅn t·∫£ng: NodeJS</li>
            </ul>
          </ul>
          <div class="footer">
            <center>Better Themis t·ª± h√†o l√† m·ªôt s·∫£n ph·∫©m c·ªßa Code Curi</center>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">ƒê√≥ng</button>
        </div>
      </div>
    </div>
  </div>

  <div class="modal modal-xl fade" id="resultsModal" tabindex="-1" aria-labelledby="resultsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="resultsModalLabel">Chi ti·∫øt ch·∫•m - <span id="username"></span></h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <div class="content">
            <div class="section" id="sec-warnings" style="display: none;">
              <h3 id="w-title">C·∫£nh b√°o</h3>
              <div class="warnings" id="warnings"></div>
            </div>

            <div class="section">
              <h3>T√≥m t·∫Øt</h3>
              <div class="summary">
                <div>
                  <h4>S·ªë l∆∞·ª£ng test</h4>
                  <p id="tests"></p>
                </div>
                <div>
                  <h4>ƒêi·ªÉm</h4>
                  <p id="points"></p>
                </div>
                <div>
                  <h4>Ch·∫ø ƒë·ªô k√¨ thi</h4>
                  <p id="mode"></p>
                </div>
              </div>
            </div>

            <div class="section">
              <h3>Chi ti·∫øt</h3>
              <div class="detail-table-container">
                <table class="detailTable">
                  <thead>
                    <tr>
                      <th>Test</th>
                      <th>Tr·∫°ng th√°i</th>
                      <th>Ph·∫£n h·ªìi</th>
                      <th>B·ªô nh·ªõ</th>
                      <th>Th·ªùi gian</th>
                      <th>ƒêi·ªÉm</th>
                    </tr>
                  </thead>
                  <tbody id="body"></tbody>
                </table>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
  <script src="https://cdn.socket.io/4.8.0/socket.io.min.js" integrity="sha384-OoIbkvzsFFQAG88r+IqMAjyOtYDPGO0cqK5HF5Uosdy/zUEGySeAzytENMDynREd" crossorigin="anonymous"></script>
  <script>
    const username = `<%= username %>`;

    async function submit() {
      const file = document.getElementById("file").files[0];
      const formData = new FormData();
      formData.append("file", file);
      formData.append("username", username);
      const response = await fetch("/submit", {
        method: "POST",
        body: formData,
      });
    }
  </script>
  <script>
    let inqueue = [],
      result = {},
      tests = [],
      users = [],
      configs = {};
    const admin = `<%= admin %>`;
    const socket = io();

    socket.on("submit", async (data) => {
      await alert(data.message);
      // window.location.reload();
    })

    socket.on("result", (data) => result = data);
    socket.on("tests", (data) => tests = data);
    socket.on("users", (data) => users = data);
    socket.on("configs", (data) => configs = data);

    function setupContextMenu() {
      const targetElements = document.querySelectorAll(".target-element");
      const customMenu = document.getElementById("custom-menu");
      let clickedElement = null;

      targetElements.forEach((element) => {
        element.addEventListener("dblclick", function(e) {
          e.preventDefault();
          const [user, test] = element.getAttribute("data-id").split(":");
          loadDetail(user, test);
        });
        element.addEventListener("contextmenu", function(event) {
          event.preventDefault();
          clickedElement = element;
          customMenu.style.display = "block";
          customMenu.style.left = `${event.pageX}px`;
          customMenu.style.top = `${event.pageY}px`;
        });
      });

      document.addEventListener("click", function(event) {
        if (event.target !== customMenu && !customMenu.contains(event.target)) {
          customMenu.style.display = "none";
        }
      });

      customMenu.addEventListener("click", function(event) {
        if (clickedElement) {
          const itemId = clickedElement.getAttribute("data-id"),
            action = event.target.getAttribute("data-action");
          if (!itemId || !action || inqueue.includes(itemId)) return;
          const [user, test] = itemId.split(":");
          if (action == "detail") loadDetail(user, test);
          customMenu.style.display = "none";
          clickedElement = null;
        }
      });
    }

    async function loadTest(users, tests) {
      const probs = document.getElementById("probs");
      while (probs.firstChild) probs.removeChild(probs.firstChild);
      let Users = document.createElement("th");
      Users.textContent = "Th√≠ sinh";
      probs.appendChild(Users);
      tests.forEach((test, idx) => {
        const selected = configs[idx].config?.selected ? "‚úÖ" : "‚ùå";
        const th = document.createElement("th");
        th.textContent = `${selected} ${test}`;
        th.id = parseString(test);
        th.classList.add("config-element");
        th.setAttribute("data-id", parseString(test));
        th.classList.add(parseString(test).replaceAll(" ", "_"));
        probs.appendChild(th);
      });
      let total = document.createElement("th");
      total.textContent = "T·ªïng ƒëi·ªÉm";
      probs.appendChild(total);
    }

    function loadUsers(users, tests) {
      const tableBody = document.querySelectorAll("table tbody")[0];
      while (tableBody.firstChild) tableBody.removeChild(tableBody.firstChild);
      users.forEach((user) => {
        const tr = document.createElement("tr");
        const tdN = document.createElement("td");
        tdN.id = "name";
        tdN.textContent = user;
        tr.appendChild(tdN);
        tr.id = parseString(user);
        tdN.classList.add("user-element");
        tdN.setAttribute("data-id", parseString(user));
        tests.forEach((test) => {
          const td = document.createElement("td");
          td.id = `${test.replaceAll(" ", "_")}`;
          td.classList.add("target-element");
          td.setAttribute(
            "data-id",
            `${user.replaceAll(" ", "_")}:${test.replaceAll(" ", "_")}`
          );
          tr.appendChild(td);
        });
        const tdT = document.createElement("td");
        tdT.id = "total";
        tr.appendChild(tdT);
        tableBody.appendChild(tr);
      });
    }

    function loadResult(users, tests) {
      const data = result;
      users.forEach((user) => {
        const userId = parseString(user);
        let total = 0;
        tests.forEach((test) => {
          const testId = parseString(test);
          const ele = document.querySelectorAll(`tr#${userId} td#${testId}`)[0];
          if (ele.textContent.includes("Test")) return;
          let point = "";
          if (data[user] && data[user][test]) point = data[user][test].point;
          total += parseFloat(point) || 0;
          point = parseFloat(point).toFixed(2);
          if (data[user] && data[user][test])
            if (!data[user][test].error) ele.textContent = `‚àö ${point}`;
            else ele.textContent = "‚Ñ± D·ªãch l·ªói";
          // else ele.textContent = "êÑÇ Kh√¥ng c√≥ b√†i";
        });
        document.querySelectorAll(`tr#${userId} td#total`)[0].textContent =
          parseFloat(total).toFixed(2);
      });
    }

    function reloadAll(users, tests) {
      loadTest(users, tests);
      loadUsers(users, tests);
      loadResult(users, tests);
    }

    function reload() {
      reloadAll(users, tests);
      setupContextMenu();
    }

    var detailModal = new bootstrap.Modal(document.getElementById("resultsModal"), {
      keyboard: false,
    });

    function loadDetail(user, test) {
      const username = `<%= username %>`;
      if (!result[user] || !result[user][test]) return;
      if (user != username && admin == "false") return;
      document.getElementById("username").innerText = `${user} (${test})`;
      const details = result[user][test];
      const body = document.getElementById("body");
      const tests = document.getElementById("tests");
      const points = document.getElementById("points");
      const mode = document.getElementById("mode");
      const warnings = document.getElementById("warnings");
      warnings.scrollTop = 0;
      document.getElementsByClassName("detail-table-container")[0].scrollTop = 0;
      if (details.error) {
        warnings.textContent = details.error;
        document.getElementById("w-title").textContent = "D·ªãch l·ªói";
        document.getElementById("sec-warnings").style.display = "block";
        detailModal.show();
        return;
      }
      if (details.warnings) {
        warnings.textContent = details.warnings;
        document.getElementById("sec-warnings").style.display = "block";
      } else document.getElementById("sec-warnings").style.display = "none";
      tests.textContent = details.total_tests;
      points.textContent = details.point;
      mode.textContent = details.icpc ? "ICPC" : "IOI";
      let content = "";
      for (let test of details.details) {
        content += `<tr>
      <td>Test ${(details.details.indexOf(test) + 1)
        .toString()
        .padStart(2, "0")}</td>
      <td>${test.status}</td>
      <td>${test.feedback}</td>
      <td>${test.memory === "-" ? "---" : `${test.memory}KB`}</td>
      <td>${test.time === "-" ? "---" : `${test.time}s`}</td>
      <td>${test.point}</td>
    </tr>`;
      }
      body.innerHTML = content;
      detailModal.show();
    }

    function parseString(str) {
      if (str[0] >= "0" && str[0] <= "9") str = "_N" + str;
      return str.replaceAll(" ", " _").replaceAll(".", "DOT").replaceAll("(", "OB").replaceAll(")", "CB");
    }

    function sleep(ms) {
      return new Promise((resolve) => setTimeout(resolve, ms));
    }

    document.addEventListener("DOMContentLoaded", async function() {
      await sleep(1000);
      reload();
      setupContextMenu();
      document.getElementById('loading').style.display = "none";
      setInterval(() => {
        reload();
        setupContextMenu();
      }, 5000);
    });
  </script>
</body>

</html>